'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.injectSagaFactory = injectSagaFactory;
exports.ejectSagaFactory = ejectSagaFactory;
exports.default = getInjectors;

var _isEmpty = require('lodash/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

var _isFunction = require('lodash/isFunction');

var _isFunction2 = _interopRequireDefault(_isFunction);

var _isString = require('lodash/isString');

var _isString2 = _interopRequireDefault(_isString);

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _conformsTo = require('lodash/conformsTo');

var _conformsTo2 = _interopRequireDefault(_conformsTo);

var _reduxSaga = require('redux-saga');

var _reduxSaga2 = _interopRequireDefault(_reduxSaga);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var allowedModes = [_constants.RESTART_ON_REMOUNT, _constants.DAEMON, _constants.ONCE_TILL_UNMOUNT];

var checkKey = function checkKey(key) {
  return (0, _invariant2.default)((0, _isString2.default)(key) && !(0, _isEmpty2.default)(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string');
};

var checkDescriptor = function checkDescriptor(descriptor) {
  var shape = {
    saga: _isFunction2.default,
    mode: function mode(_mode) {
      return (0, _isString2.default)(_mode) && allowedModes.indexOf(_mode) !== -1;
    }
  };
  (0, _invariant2.default)((0, _conformsTo2.default)(descriptor, shape), '(app/utils...) injectSaga: Expected a valid saga descriptor');
};

function injectSagaFactory(store) {
  return function injectSaga(key) {
    var descriptor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var args = arguments[2];

    var newDescriptor = _extends({}, descriptor, { mode: descriptor.mode || _constants.RESTART_ON_REMOUNT });
    var saga = newDescriptor.saga,
        mode = newDescriptor.mode;


    checkKey(key);
    checkDescriptor(newDescriptor);

    if (!store.injectedSagas) {
      store.injectedSagas = {}; // eslint-disable-line no-param-reassign
      store.runSaga = (0, _reduxSaga2.default)(); // eslint-disable-line no-param-reassign
    }

    var hasSaga = Reflect.has(store.injectedSagas, key);

    if (process.env.NODE_ENV !== 'production') {
      var oldDescriptor = store.injectedSagas[key];
      // enable hot reloading of daemon and once-till-unmount sagas
      if (hasSaga && oldDescriptor.saga !== saga) {
        oldDescriptor.task.cancel();
        hasSaga = false;
      }
    }

    if (!hasSaga || hasSaga && mode !== _constants.DAEMON && mode !== _constants.ONCE_TILL_UNMOUNT) {
      store.injectedSagas[key] = _extends({}, newDescriptor, { task: store.runSaga(saga, args) }); // eslint-disable-line no-param-reassign
    }
  };
}

function ejectSagaFactory(store) {
  return function ejectSaga(key) {
    checkKey(key);

    if (Reflect.has(store.injectedSagas, key)) {
      var descriptor = store.injectedSagas[key];
      if (descriptor.mode !== _constants.DAEMON) {
        descriptor.task.cancel();

        // Clean up in production; in development we need `descriptor.saga` for hot reloading
        if (process.env.NODE_ENV === 'production') {
          // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`
          store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign
        }
      }
    }
  };
}

function getInjectors(store) {
  return {
    injectSaga: injectSagaFactory(store, true),
    ejectSaga: ejectSagaFactory(store, true)
  };
}