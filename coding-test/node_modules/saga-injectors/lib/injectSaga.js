'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require('hoist-non-react-statics');

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _sagaInjectors = require('./sagaInjectors');

var _sagaInjectors2 = _interopRequireDefault(_sagaInjectors);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Dynamically injects a saga, passes component's props as saga arguments
 *
 * @param {string} key A key of the saga
 * @param {function} saga A root saga that will be injected
 * @param {string} [mode] By default (constants.RESTART_ON_REMOUNT) the saga will be started on component mount and
 * cancelled with `task.cancel()` on component un-mount for improved performance. Another two options:
 *   - constants.DAEMON—starts the saga on component mount and never cancels it or starts again,
 *   - constants.ONCE_TILL_UNMOUNT—behaves like 'RESTART_ON_REMOUNT' but never runs it again.
 *
 */
exports.default = function (_ref) {
  var key = _ref.key,
      saga = _ref.saga,
      mode = _ref.mode;
  return function (WrappedComponent) {
    var InjectSaga = function (_React$Component) {
      _inherits(InjectSaga, _React$Component);

      function InjectSaga() {
        var _ref2;

        var _temp, _this, _ret;

        _classCallCheck(this, InjectSaga);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref2 = InjectSaga.__proto__ || Object.getPrototypeOf(InjectSaga)).call.apply(_ref2, [this].concat(args))), _this), _this.injectors = (0, _sagaInjectors2.default)(_this.context.store), _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(InjectSaga, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          var injectSaga = this.injectors.injectSaga;


          injectSaga(key, { saga: saga, mode: mode }, this.props);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          var ejectSaga = this.injectors.ejectSaga;


          ejectSaga(key);
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement(WrappedComponent, this.props);
        }
      }]);

      return InjectSaga;
    }(_react2.default.Component);

    InjectSaga.WrappedComponent = WrappedComponent;
    InjectSaga.contextTypes = {
      store: _propTypes2.default.object.isRequired
    };
    InjectSaga.displayName = 'withSaga(' + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ')';


    return (0, _hoistNonReactStatics2.default)(InjectSaga, WrappedComponent);
  };
};

module.exports = exports['default'];