'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Test injectors
                                                                                                                                                                                                                                                                   */

var _checkStore = require('../checkStore');

var _checkStore2 = _interopRequireDefault(_checkStore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('checkStore', function () {
  var store = void 0;

  beforeEach(function () {
    store = {
      dispatch: function dispatch() {},
      subscribe: function subscribe() {},
      getState: function getState() {},
      replaceReducer: function replaceReducer() {},
      runSaga: function runSaga() {},
      injectedReducers: {},
      injectedSagas: {}
    };
  });

  it('should not throw if passed valid store shape', function () {
    expect(function () {
      return (0, _checkStore2.default)(store);
    }).not.toThrow();
  });

  it('should throw if passed invalid store shape', function () {
    expect(function () {
      return (0, _checkStore2.default)({});
    }).toThrow();
    expect(function () {
      return (0, _checkStore2.default)(_extends({}, store, { injectedSagas: null }));
    }).toThrow();
    expect(function () {
      return (0, _checkStore2.default)(_extends({}, store, { injectedReducers: null }));
    }).toThrow();
    expect(function () {
      return (0, _checkStore2.default)(_extends({}, store, { runSaga: null }));
    }).toThrow();
    expect(function () {
      return (0, _checkStore2.default)(_extends({}, store, { replaceReducer: null }));
    }).toThrow();
  });
});