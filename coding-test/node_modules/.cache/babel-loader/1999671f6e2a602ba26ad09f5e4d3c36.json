{"ast":null,"code":"import plain from './structure/plain';\n\nvar toArray = function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar getError = function getError(value, values, validators) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = toArray(validators)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var validator = _step.value;\n      var error = validator(value, values);\n\n      if (error) {\n        return error;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar generateValidator = function generateValidator(validators, _ref) {\n  var getIn = _ref.getIn;\n  return function (values) {\n    var errors = {};\n    Object.keys(validators).forEach(function (name) {\n      var value = getIn(values, name);\n      var error = getError(value, values, validators[name]);\n\n      if (error) {\n        errors = plain.setIn(errors, name, error);\n      }\n    });\n    return errors;\n  };\n};\n\nexport default generateValidator;","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/node_modules/redux-form-immutable/es/generateValidator.js"],"names":["plain","toArray","value","Array","isArray","getError","values","validators","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_iterator","Symbol","iterator","_step","next","done","validator","error","err","return","generateValidator","_ref","getIn","errors","Object","keys","forEach","name","setIn"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,mBAAlB;;AAEA,IAAIC,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACpC,SAAOC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAtC;AACD,CAFD;;AAIA,IAAIG,QAAQ,GAAG,SAASA,QAAT,CAAkBH,KAAlB,EAAyBI,MAAzB,EAAiCC,UAAjC,EAA6C;AAC1D,MAAIC,yBAAyB,GAAG,IAAhC;AACA,MAAIC,iBAAiB,GAAG,KAAxB;AACA,MAAIC,cAAc,GAAGC,SAArB;;AAEA,MAAI;AACF,SAAK,IAAIC,SAAS,GAAGX,OAAO,CAACM,UAAD,CAAP,CAAoBM,MAAM,CAACC,QAA3B,GAAhB,EAAwDC,KAA7D,EAAoE,EAAEP,yBAAyB,GAAG,CAACO,KAAK,GAAGH,SAAS,CAACI,IAAV,EAAT,EAA2BC,IAAzD,CAApE,EAAoIT,yBAAyB,GAAG,IAAhK,EAAsK;AACpK,UAAIU,SAAS,GAAGH,KAAK,CAACb,KAAtB;AAEA,UAAIiB,KAAK,GAAGD,SAAS,CAAChB,KAAD,EAAQI,MAAR,CAArB;;AACA,UAAIa,KAAJ,EAAW;AACT,eAAOA,KAAP;AACD;AACF;AACF,GATD,CASE,OAAOC,GAAP,EAAY;AACZX,IAAAA,iBAAiB,GAAG,IAApB;AACAC,IAAAA,cAAc,GAAGU,GAAjB;AACD,GAZD,SAYU;AACR,QAAI;AACF,UAAI,CAACZ,yBAAD,IAA8BI,SAAS,CAACS,MAA5C,EAAoD;AAClDT,QAAAA,SAAS,CAACS,MAAV;AACD;AACF,KAJD,SAIU;AACR,UAAIZ,iBAAJ,EAAuB;AACrB,cAAMC,cAAN;AACD;AACF;AACF;AACF,CA5BD;;AA8BA,IAAIY,iBAAiB,GAAG,SAASA,iBAAT,CAA2Bf,UAA3B,EAAuCgB,IAAvC,EAA6C;AACnE,MAAIC,KAAK,GAAGD,IAAI,CAACC,KAAjB;AACA,SAAO,UAAUlB,MAAV,EAAkB;AACvB,QAAImB,MAAM,GAAG,EAAb;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYpB,UAAZ,EAAwBqB,OAAxB,CAAgC,UAAUC,IAAV,EAAgB;AAC9C,UAAI3B,KAAK,GAAGsB,KAAK,CAAClB,MAAD,EAASuB,IAAT,CAAjB;AACA,UAAIV,KAAK,GAAGd,QAAQ,CAACH,KAAD,EAAQI,MAAR,EAAgBC,UAAU,CAACsB,IAAD,CAA1B,CAApB;;AACA,UAAIV,KAAJ,EAAW;AACTM,QAAAA,MAAM,GAAGzB,KAAK,CAAC8B,KAAN,CAAYL,MAAZ,EAAoBI,IAApB,EAA0BV,KAA1B,CAAT;AACD;AACF,KAND;AAOA,WAAOM,MAAP;AACD,GAVD;AAWD,CAbD;;AAeA,eAAeH,iBAAf","sourcesContent":["import plain from './structure/plain';\n\nvar toArray = function toArray(value) {\n  return Array.isArray(value) ? value : [value];\n};\n\nvar getError = function getError(value, values, validators) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = toArray(validators)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var validator = _step.value;\n\n      var error = validator(value, values);\n      if (error) {\n        return error;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n};\n\nvar generateValidator = function generateValidator(validators, _ref) {\n  var getIn = _ref.getIn;\n  return function (values) {\n    var errors = {};\n    Object.keys(validators).forEach(function (name) {\n      var value = getIn(values, name);\n      var error = getError(value, values, validators[name]);\n      if (error) {\n        errors = plain.setIn(errors, name, error);\n      }\n    });\n    return errors;\n  };\n};\n\nexport default generateValidator;"]},"metadata":{},"sourceType":"module"}