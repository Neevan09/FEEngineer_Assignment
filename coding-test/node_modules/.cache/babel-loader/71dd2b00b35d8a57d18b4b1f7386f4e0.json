{"ast":null,"code":"import axios from \"axios\";\nimport { call, put, all } from \"redux-saga/effects\";\nexport const HttpService = createAxiosService();\n\nconst createAxiosService = () => {\n  return axios.create({\n    baseURL: sessionStorage.getItem(\"APIContext\"),\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-type\": \"application/json\"\n    }\n  });\n};\n\nfunction* doApiCall(method, url, request, successCallback, errorCallback, opts = {}) {\n  enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> method\", method);\n  enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> url\", url);\n  const {\n    showLoading = true,\n    parseResponse = false,\n    showErrorBanner = true,\n    timeout = 60000,\n    baseURL,\n    closeLoadingOnSuccess = false,\n    headers,\n    withCredentials\n  } = opts;\n  const axiosOptions = {\n    baseURL,\n    timeout,\n    headers,\n    withCredentials\n  };\n\n  try {\n    if (showLoading) yield put(appLoaderActions.show());\n    let res;\n\n    switch (method) {\n      case \"GET\":\n        res = yield call(() => HttpService.get(url, axiosOptions), null);\n        break;\n\n      case \"POST\":\n        res = yield call(() => HttpService.post(url, request, axiosOptions), null);\n        break;\n\n      case \"PUT\":\n      case \"DELETE\":\n      case \"PATCH\":\n      case \"HEAD\":\n        // TODO: Implement if needed\n        break;\n\n      default:\n        console.warn(\"LOG-DEBUG: function*doApiCall -> Incorrect use of doApiCall\");\n        break;\n    }\n\n    const response = parseResponse ? res.data.payload : res;\n    enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> response\", url, response);\n    if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n    if (successCallback) yield successCallback(response);\n  } catch (error) {\n    enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> error\", url, error);\n    if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n    if (showErrorBanner) yield put(appMessageActions.addAppMessage(parseErrorMessages(error), \"error\", true, true, true));\n    if (errorCallback) yield errorCallback(error);\n  } finally {\n    enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> finally\", url);\n    if (showLoading && !closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n  }\n}\n/**\n* Wrapper method for making GET calls\n* @param {String} url Request URL\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\n\n\nexport function* doGet(url, successCallback, errorCallback, opts) {\n  yield doApiCall(\"GET\", url, null, successCallback, errorCallback, opts);\n}\n/**\n* Wrapper method for making POST calls\n* @param {String} url Request URL\n* @param {Object} request Request body for the API call\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\n\nexport function* doPost(url, request, successCallback, errorCallback, opts = {}) {\n  yield doApiCall(\"POST\", url, request, successCallback, errorCallback, opts);\n}","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/src/services/HttpService.js"],"names":["axios","call","put","all","HttpService","createAxiosService","create","baseURL","sessionStorage","getItem","headers","doApiCall","method","url","request","successCallback","errorCallback","opts","enableHTTPServiceLogs","console","log","showLoading","parseResponse","showErrorBanner","timeout","closeLoadingOnSuccess","withCredentials","axiosOptions","appLoaderActions","show","res","get","post","warn","response","data","payload","hide","error","appMessageActions","addAppMessage","parseErrorMessages","doGet","doPost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { call, put, all } from \"redux-saga/effects\";\n\n\nexport const HttpService = createAxiosService();\n\nconst createAxiosService = () => {\n  return axios.create({\n      baseURL: sessionStorage.getItem(\"APIContext\"),\n      headers: {\n          \"Accept\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-type\": \"application/json\"\n      }\n  });\n};\n\n\nfunction* doApiCall(method, url, request, successCallback, errorCallback, opts = {}) {\n  enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> method\", method);\n  enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> url\", url);\n  const { showLoading = true, parseResponse = false, showErrorBanner = true, timeout = 60000, baseURL, closeLoadingOnSuccess = false, headers, withCredentials } = opts;\n\n  \n  const axiosOptions = { baseURL, timeout, headers, withCredentials };\n  try {\n      if (showLoading) yield put(appLoaderActions.show());\n      let res;\n      switch (method) {\n          case \"GET\":\n              res = yield call(() => HttpService.get(url, axiosOptions), null);\n              break;\n          case \"POST\":\n              res = yield call(() => HttpService.post(url, request, axiosOptions), null);\n              break;\n          case \"PUT\":\n          case \"DELETE\":\n          case \"PATCH\":\n          case \"HEAD\":\n              // TODO: Implement if needed\n              break;\n          default:\n              console.warn(\"LOG-DEBUG: function*doApiCall -> Incorrect use of doApiCall\");\n              break;\n      }\n      const response = parseResponse ? res.data.payload : res;\n      enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> response\", url, response);\n      if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n      if (successCallback) yield successCallback(response);\n  } catch (error) {\n      enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> error\", url, error);\n      if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n      if (showErrorBanner) yield put(appMessageActions.addAppMessage(parseErrorMessages(error), \"error\",true,true,true));\n      if (errorCallback) yield errorCallback(error);\n  } finally {\n      enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> finally\", url);\n      if (showLoading && !closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n  }\n}\n\n/**\n* Wrapper method for making GET calls\n* @param {String} url Request URL\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\nexport function* doGet(url, successCallback, errorCallback, opts) {\n  yield doApiCall(\"GET\", url, null, successCallback, errorCallback, opts);\n}\n\n/**\n* Wrapper method for making POST calls\n* @param {String} url Request URL\n* @param {Object} request Request body for the API call\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\nexport function* doPost(url, request, successCallback, errorCallback, opts = {}) {\n  yield doApiCall(\"POST\", url, request, successCallback, errorCallback, opts);\n}\n"]},"metadata":{},"sourceType":"module"}