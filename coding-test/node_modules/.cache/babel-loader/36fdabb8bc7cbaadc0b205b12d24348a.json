{"ast":null,"code":"import axios from \"axios\";\nimport { call, put, all } from \"redux-saga/effects\";\n\nconst createAxiosService = () => {\n  return axios.create({\n    baseURL: sessionStorage.getItem(\"APIContext\"),\n    headers: {\n      \"Accept\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-type\": \"application/json\",\n      \"Access-Control-Allow-Headers\": \"Content-Type, api_key, Authorization\"\n    }\n  });\n};\n\nexport const HttpService = createAxiosService();\n\nfunction* doApiCall(method, url, request, successCallback, errorCallback, opts = {}) {\n  const {\n    parseResponse = false,\n    timeout = 60000,\n    baseURL,\n    headers,\n    withCredentials\n  } = opts;\n  const axiosOptions = {\n    baseURL,\n    timeout,\n    headers,\n    withCredentials\n  };\n\n  try {\n    let res;\n\n    switch (method) {\n      case \"GET\":\n        res = yield call(() => HttpService.get(url, axiosOptions), null);\n        break;\n\n      case \"POST\":\n        res = yield call(() => HttpService.post(url, request, axiosOptions), null);\n        break;\n\n      case \"PUT\":\n      case \"DELETE\":\n      case \"PATCH\":\n      case \"HEAD\":\n        // TODO: Implement if needed\n        break;\n\n      default:\n        console.warn(\"LOG-DEBUG: function*doApiCall -> Incorrect use of doApiCall\");\n        break;\n    }\n\n    const response = parseResponse ? res.data.payload : res;\n    if (successCallback) yield successCallback(response);\n  } catch (error) {\n    // enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> error\", url, error);\n    // if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n    // if (showErrorBanner) yield put(appMessageActions.addAppMessage(parseErrorMessages(error), \"error\",true,true,true));\n    if (errorCallback) yield errorCallback(error);\n  } finally {// enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> finally\", url);\n    // if (showLoading && !closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n  }\n}\n/**\n* Wrapper method for making GET calls\n* @param {String} url Request URL\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\n\n\nexport function* doGet(url, successCallback, errorCallback, opts) {\n  yield doApiCall(\"GET\", url, null, successCallback, errorCallback, opts);\n}\n/**\n* Wrapper method for making POST calls\n* @param {String} url Request URL\n* @param {Object} request Request body for the API call\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\n\nexport function* doPost(url, request, successCallback, errorCallback, opts = {}) {\n  yield doApiCall(\"POST\", url, request, successCallback, errorCallback, opts);\n}","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/src/services/HttpService.js"],"names":["axios","call","put","all","createAxiosService","create","baseURL","sessionStorage","getItem","headers","HttpService","doApiCall","method","url","request","successCallback","errorCallback","opts","parseResponse","timeout","withCredentials","axiosOptions","res","get","post","console","warn","response","data","payload","error","doGet","doPost"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,QAA+B,oBAA/B;;AAIA,MAAMC,kBAAkB,GAAG,MAAM;AAC/B,SAAOJ,KAAK,CAACK,MAAN,CAAa;AAChBC,IAAAA,OAAO,EAAEC,cAAc,CAACC,OAAf,CAAuB,YAAvB,CADO;AAEhBC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,qCAA+B,GAF1B;AAGL,sBAAgB,kBAHX;AAIL,sCAAgC;AAJ3B;AAFO,GAAb,CAAP;AASD,CAVD;;AAYA,OAAO,MAAMC,WAAW,GAAGN,kBAAkB,EAAtC;;AAGP,UAAUO,SAAV,CAAoBC,MAApB,EAA4BC,GAA5B,EAAiCC,OAAjC,EAA0CC,eAA1C,EAA2DC,aAA3D,EAA0EC,IAAI,GAAG,EAAjF,EAAqF;AACnF,QAAM;AAAEC,IAAAA,aAAa,GAAG,KAAlB;AAAyBC,IAAAA,OAAO,GAAG,KAAnC;AAA0Cb,IAAAA,OAA1C;AAAmDG,IAAAA,OAAnD;AAA4DW,IAAAA;AAA5D,MAAgFH,IAAtF;AAGA,QAAMI,YAAY,GAAG;AAAEf,IAAAA,OAAF;AAAWa,IAAAA,OAAX;AAAoBV,IAAAA,OAApB;AAA6BW,IAAAA;AAA7B,GAArB;;AACA,MAAI;AACA,QAAIE,GAAJ;;AACA,YAAQV,MAAR;AACI,WAAK,KAAL;AACIU,QAAAA,GAAG,GAAG,MAAMrB,IAAI,CAAC,MAAMS,WAAW,CAACa,GAAZ,CAAgBV,GAAhB,EAAqBQ,YAArB,CAAP,EAA2C,IAA3C,CAAhB;AACA;;AACJ,WAAK,MAAL;AACIC,QAAAA,GAAG,GAAG,MAAMrB,IAAI,CAAC,MAAMS,WAAW,CAACc,IAAZ,CAAiBX,GAAjB,EAAsBC,OAAtB,EAA+BO,YAA/B,CAAP,EAAqD,IAArD,CAAhB;AACA;;AACJ,WAAK,KAAL;AACA,WAAK,QAAL;AACA,WAAK,OAAL;AACA,WAAK,MAAL;AACI;AACA;;AACJ;AACII,QAAAA,OAAO,CAACC,IAAR,CAAa,6DAAb;AACA;AAfR;;AAiBA,UAAMC,QAAQ,GAAGT,aAAa,GAAGI,GAAG,CAACM,IAAJ,CAASC,OAAZ,GAAsBP,GAApD;AACI,QAAIP,eAAJ,EAAqB,MAAMA,eAAe,CAACY,QAAD,CAArB;AAC5B,GArBD,CAqBE,OAAOG,KAAP,EAAc;AACZ;AACA;AACA;AACA,QAAId,aAAJ,EAAmB,MAAMA,aAAa,CAACc,KAAD,CAAnB;AACtB,GA1BD,SA0BU,CACN;AACA;AACH;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,UAAUC,KAAV,CAAgBlB,GAAhB,EAAqBE,eAArB,EAAsCC,aAAtC,EAAqDC,IAArD,EAA2D;AAChE,QAAMN,SAAS,CAAC,KAAD,EAAQE,GAAR,EAAa,IAAb,EAAmBE,eAAnB,EAAoCC,aAApC,EAAmDC,IAAnD,CAAf;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,UAAUe,MAAV,CAAiBnB,GAAjB,EAAsBC,OAAtB,EAA+BC,eAA/B,EAAgDC,aAAhD,EAA+DC,IAAI,GAAG,EAAtE,EAA0E;AAC/E,QAAMN,SAAS,CAAC,MAAD,EAASE,GAAT,EAAcC,OAAd,EAAuBC,eAAvB,EAAwCC,aAAxC,EAAuDC,IAAvD,CAAf;AACD","sourcesContent":["import axios from \"axios\";\nimport { call, put, all } from \"redux-saga/effects\";\n\n\n\nconst createAxiosService = () => {\n  return axios.create({\n      baseURL: sessionStorage.getItem(\"APIContext\"),\n      headers: {\n          \"Accept\": \"application/json\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-type\": \"application/json\",\n          \"Access-Control-Allow-Headers\": \"Content-Type, api_key, Authorization\"\n      }\n  });\n};\n\nexport const HttpService = createAxiosService();\n\n\nfunction* doApiCall(method, url, request, successCallback, errorCallback, opts = {}) {\n  const { parseResponse = false, timeout = 60000, baseURL, headers, withCredentials } = opts;\n\n  \n  const axiosOptions = { baseURL, timeout, headers, withCredentials };\n  try {\n      let res;\n      switch (method) {\n          case \"GET\":\n              res = yield call(() => HttpService.get(url, axiosOptions), null);\n              break;\n          case \"POST\":\n              res = yield call(() => HttpService.post(url, request, axiosOptions), null);\n              break;\n          case \"PUT\":\n          case \"DELETE\":\n          case \"PATCH\":\n          case \"HEAD\":\n              // TODO: Implement if needed\n              break;\n          default:\n              console.warn(\"LOG-DEBUG: function*doApiCall -> Incorrect use of doApiCall\");\n              break;\n      }\n      const response = parseResponse ? res.data.payload : res;\n          if (successCallback) yield successCallback(response);\n  } catch (error) {\n      // enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> error\", url, error);\n      // if (closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n      // if (showErrorBanner) yield put(appMessageActions.addAppMessage(parseErrorMessages(error), \"error\",true,true,true));\n      if (errorCallback) yield errorCallback(error);\n  } finally {\n      // enableHTTPServiceLogs && console.log(\"LOG-DEBUG: function*doApiCall -> finally\", url);\n      // if (showLoading && !closeLoadingOnSuccess) yield put(appLoaderActions.hide());\n  }\n}\n\n/**\n* Wrapper method for making GET calls\n* @param {String} url Request URL\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\nexport function* doGet(url, successCallback, errorCallback, opts) {\n  yield doApiCall(\"GET\", url, null, successCallback, errorCallback, opts);\n}\n\n/**\n* Wrapper method for making POST calls\n* @param {String} url Request URL\n* @param {Object} request Request body for the API call\n* @param {Function} [successCallback] Success callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Function} [errorCallback] Error callback function that can call one or more actions\n*                      - Should be a generator function\n* @param {Object} [opts] Additional options for configuring the request\n*                      - showLoading -> default: true => Determines if loading shown before and after the request\n*                      - parseResponse -> default: false => Determines if response should be extracted from resp.payload.data\n*                      - showErrorBanner -> default: true => Determines if an app message with the API error should be displayed\n*                      - timeout -> default: 60000ms => Determines after what time the API returns a failure\n*                      - baseURL -> default: empty => Allows customization of the baseURL\n*/\nexport function* doPost(url, request, successCallback, errorCallback, opts = {}) {\n  yield doApiCall(\"POST\", url, request, successCallback, errorCallback, opts);\n}\n"]},"metadata":{},"sourceType":"module"}