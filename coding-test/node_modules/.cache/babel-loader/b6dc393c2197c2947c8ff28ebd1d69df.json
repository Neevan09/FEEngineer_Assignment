{"ast":null,"code":"/**\n * Create the store with dynamic reducers\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { fromJS } from 'immutable'; // import thunk from \"redux-thunk\";\n\nimport createReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nconst reduxSagaMonitorOptions = {};\nexport const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose; // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(createReducer(), fromJS(initialState), composeWithDevTools(composeEnhancers(...enhancers))); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/src/configureStore.js"],"names":["createStore","applyMiddleware","compose","routerMiddleware","createSagaMiddleware","fromJS","createReducer","composeWithDevTools","reduxSagaMonitorOptions","sagaMiddleware","configureStore","initialState","history","composeEnhancers","middlewares","enhancers","store","runSaga","run","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,YAA1B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,MAAMC,uBAAuB,GAAG,EAAhC;AACA,OAAO,MAAMC,cAAc,GAAGL,oBAAoB,CAACI,uBAAD,CAA3C;AAEP,eAAe,SAASE,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2CC,OAA3C,EAAoD;AACjE,MAAIC,gBAAgB,GAAGX,OAAvB,CADiE,CAGjE;AACA;AACA;;AACA,QAAMY,WAAW,GAAG,CAACL,cAAD,EAAiBN,gBAAgB,CAACS,OAAD,CAAjC,CAApB;AAEA,QAAMG,SAAS,GAAG,CAACd,eAAe,CAAC,GAAGa,WAAJ,CAAhB,CAAlB;AAEA,QAAME,KAAK,GAAGhB,WAAW,CACvBM,aAAa,EADU,EAEvBD,MAAM,CAACM,YAAD,CAFiB,EAGvBJ,mBAAmB,CAACM,gBAAgB,CAAC,GAAGE,SAAJ,CAAjB,CAHI,CAAzB,CAViE,CAgBjE;;AACAC,EAAAA,KAAK,CAACC,OAAN,GAAgBR,cAAc,CAACS,GAA/B;AACAF,EAAAA,KAAK,CAACG,gBAAN,GAAyB,EAAzB,CAlBiE,CAkBpC;;AAC7BH,EAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB,CAnBiE,CAmBvC;AAE1B;;AACA;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpCP,MAAAA,KAAK,CAACQ,cAAN,CAAqBlB,aAAa,CAACU,KAAK,CAACG,gBAAP,CAAlC;AACD,KAFD;AAGD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { fromJS } from 'immutable';\n// import thunk from \"redux-thunk\";\nimport createReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst reduxSagaMonitorOptions = {};\nexport const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    createReducer(),\n    fromJS(initialState),\n    composeWithDevTools(composeEnhancers(...enhancers))\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}