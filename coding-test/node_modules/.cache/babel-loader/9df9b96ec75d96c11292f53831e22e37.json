{"ast":null,"code":"/**\n * Create the store with dynamic reducers\n */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { fromJS } from 'immutable'; // import thunk from \"redux-thunk\";\n\nimport createReducer from './reducers';\nconst reduxSagaMonitorOptions = {};\nexport const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose; // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n\n  /* istanbul ignore next */\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n      trace: true,\n      traceLimit: 25\n    }); // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n  } // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n  const enhancers = [applyMiddleware(...middlewares)];\n  const store = createStore(createReducer(), fromJS(initialState), composeEnhancers(...enhancers)); // Extensions\n\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n\n  store.injectedSagas = {}; // Saga registry\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n\n  /* istanbul ignore next */\n\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/src/configureStore.js"],"names":["createStore","applyMiddleware","compose","routerMiddleware","createSagaMiddleware","fromJS","createReducer","reduxSagaMonitorOptions","sagaMiddleware","configureStore","initialState","history","composeEnhancers","process","env","NODE_ENV","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","trace","traceLimit","middlewares","enhancers","store","runSaga","run","injectedReducers","injectedSagas","module","hot","accept","replaceReducer"],"mappings":"AAAA;AACA;AACA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,gBAAT,QAAiC,wBAAjC;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,MAAT,QAAuB,WAAvB,C,CACA;;AACA,OAAOC,aAAP,MAA0B,YAA1B;AAEA,MAAMC,uBAAuB,GAAG,EAAhC;AACA,OAAO,MAAMC,cAAc,GAAGJ,oBAAoB,CAACG,uBAAD,CAA3C;AAEP,eAAe,SAASE,cAAT,CAAwBC,YAAY,GAAG,EAAvC,EAA2CC,OAA3C,EAAoD;AACjE,MAAIC,gBAAgB,GAAGV,OAAvB,CADiE,CAGjE;;AACA;;AACA,MAAIW,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,OAAOC,MAAP,KAAkB,QAA/D,EAAyE;AACvE,QAAIA,MAAM,CAACC,oCAAX,EAAiDL,gBAAgB,GAAGI,MAAM,CAACC,oCAAP,CAA4C;AAAEC,MAAAA,KAAK,EAAE,IAAT;AAAeC,MAAAA,UAAU,EAAE;AAA3B,KAA5C,CAAnB,CADsB,CAGvE;AACA;AACA;AACA;AACA;AACA;AACD,GAdgE,CAiBjE;AACA;AACA;;;AACA,QAAMC,WAAW,GAAG,CAACZ,cAAD,EAAiBL,gBAAgB,CAACQ,OAAD,CAAjC,CAApB;AAEA,QAAMU,SAAS,GAAG,CAACpB,eAAe,CAAC,GAAGmB,WAAJ,CAAhB,CAAlB;AAEA,QAAME,KAAK,GAAGtB,WAAW,CACvBM,aAAa,EADU,EAEvBD,MAAM,CAACK,YAAD,CAFiB,EAGvBE,gBAAgB,CAAC,GAAGS,SAAJ,CAHO,CAAzB,CAxBiE,CA8BjE;;AACAC,EAAAA,KAAK,CAACC,OAAN,GAAgBf,cAAc,CAACgB,GAA/B;AACAF,EAAAA,KAAK,CAACG,gBAAN,GAAyB,EAAzB,CAhCiE,CAgCpC;;AAC7BH,EAAAA,KAAK,CAACI,aAAN,GAAsB,EAAtB,CAjCiE,CAiCvC;AAE1B;;AACA;;AACA,MAAIC,MAAM,CAACC,GAAX,EAAgB;AACdD,IAAAA,MAAM,CAACC,GAAP,CAAWC,MAAX,CAAkB,YAAlB,EAAgC,MAAM;AACpCP,MAAAA,KAAK,CAACQ,cAAN,CAAqBxB,aAAa,CAACgB,KAAK,CAACG,gBAAP,CAAlC;AACD,KAFD;AAGD;;AAED,SAAOH,KAAP;AACD","sourcesContent":["/**\n * Create the store with dynamic reducers\n */\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport { fromJS } from 'immutable';\n// import thunk from \"redux-thunk\";\nimport createReducer from './reducers';\n\nconst reduxSagaMonitorOptions = {};\nexport const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({ trace: true, traceLimit: 25 });\n\n    // NOTE: Uncomment the code below to restore support for Redux Saga\n    // Dev Tools once it supports redux-saga version 1.x.x\n    // if (window.__SAGA_MONITOR_EXTENSION__)\n    //   reduxSagaMonitorOptions = {\n    //     sagaMonitor: window.__SAGA_MONITOR_EXTENSION__,\n    //   };\n  }\n\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [applyMiddleware(...middlewares)];\n\n  const store = createStore(\n    createReducer(),\n    fromJS(initialState),\n    composeEnhancers(...enhancers)\n  );\n\n  // Extensions\n  store.runSaga = sagaMiddleware.run;\n  store.injectedReducers = {}; // Reducer registry\n  store.injectedSagas = {}; // Saga registry\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      store.replaceReducer(createReducer(store.injectedReducers));\n    });\n  }\n\n  return store;\n}\n"]},"metadata":{},"sourceType":"module"}