{"ast":null,"code":"import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\nimport checkStore from './checkStore';\nimport createReducer from '../reducers';\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n    invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(app/utils...) injectReducer: Expected `reducer` to be a reducer function'); // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n\n    if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\nexport default function getInjectors(store) {\n  checkStore(store);\n  return {\n    injectReducer: injectReducerFactory(store, true)\n  };\n}","map":{"version":3,"sources":["C:/Users/Naveen/Desktop/Final/FEEngineer_Assignment/coding-test/src/utils/reducerInjectors.js"],"names":["invariant","isEmpty","isFunction","isString","checkStore","createReducer","injectReducerFactory","store","isValid","injectReducer","key","reducer","Reflect","has","injectedReducers","replaceReducer","getInjectors"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,QAA9B,QAA8C,QAA9C;AAEA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,aAAP,MAA0B,aAA1B;AAEA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,OAArC,EAA8C;AACnD,SAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,OAA5B,EAAqC;AAC1C,QAAI,CAACH,OAAL,EAAcJ,UAAU,CAACG,KAAD,CAAV;AAEdP,IAAAA,SAAS,CACPG,QAAQ,CAACO,GAAD,CAAR,IAAiB,CAACT,OAAO,CAACS,GAAD,CAAzB,IAAkCR,UAAU,CAACS,OAAD,CADrC,EAEP,2EAFO,CAAT,CAH0C,CAQ1C;;AACA,QACEC,OAAO,CAACC,GAAR,CAAYN,KAAK,CAACO,gBAAlB,EAAoCJ,GAApC,KACAH,KAAK,CAACO,gBAAN,CAAuBJ,GAAvB,MAAgCC,OAFlC,EAIE;AAEFJ,IAAAA,KAAK,CAACO,gBAAN,CAAuBJ,GAAvB,IAA8BC,OAA9B,CAf0C,CAeH;;AACvCJ,IAAAA,KAAK,CAACQ,cAAN,CAAqBV,aAAa,CAACE,KAAK,CAACO,gBAAP,CAAlC;AACD,GAjBD;AAkBD;AAED,eAAe,SAASE,YAAT,CAAsBT,KAAtB,EAA6B;AAC1CH,EAAAA,UAAU,CAACG,KAAD,CAAV;AAEA,SAAO;AACLE,IAAAA,aAAa,EAAEH,oBAAoB,CAACC,KAAD,EAAQ,IAAR;AAD9B,GAAP;AAGD","sourcesContent":["import invariant from 'invariant';\nimport { isEmpty, isFunction, isString } from 'lodash';\n\nimport checkStore from './checkStore';\nimport createReducer from '../reducers';\n\nexport function injectReducerFactory(store, isValid) {\n  return function injectReducer(key, reducer) {\n    if (!isValid) checkStore(store);\n\n    invariant(\n      isString(key) && !isEmpty(key) && isFunction(reducer),\n      '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\n    );\n\n    // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\n    if (\n      Reflect.has(store.injectedReducers, key) &&\n      store.injectedReducers[key] === reducer\n    )\n      return;\n\n    store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\n    store.replaceReducer(createReducer(store.injectedReducers));\n  };\n}\n\nexport default function getInjectors(store) {\n  checkStore(store);\n\n  return {\n    injectReducer: injectReducerFactory(store, true),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}